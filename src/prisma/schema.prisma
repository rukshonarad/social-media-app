datasource db {
    provider = "mongodb"
    url      = env("DB_URL")
}

generator client {
    provider = "prisma-client-js"
}

enum AccountStatus {
    INACTIVE
    ACTIVE
}

enum PostVisibilty {
    PUBLIC
    PRIVATE
    FRIENDS
}

enum FrienshipStatus {
    PENDING
    ACCEPTED
}

enum PostStatus {
    PUBLISHED
    ARCHIVED
    DRAFT
}

type Place {
    city    String?
    region  String?
    country String
}

type WorkExperience {
    startYear Int
    endYear   Int
    company   String
    position  String
}

type Education {
    educationName String
    startYear     Int
    endYear       Int
    school        String
    degree        String
    major         String
}

model User {
    id                               String           @id @default(auto()) @map("_id") @db.ObjectId
    email                            String           @unique
    firstName                        String
    lastName                         String
    dateOfBirth                      DateTime
    password                         String
    currentPlace                     Place?
    education                        Education[]
    workExperience                   WorkExperience[]
    bio                              String?
    status                           AccountStatus    @default(INACTIVE)
    activationToken                  String?
    passwordResetToken               String?
    passwordResetTokenExpirationDate DateTime?
    createdAt                        DateTime         @default(now())
    updatedAt                        DateTime         @updatedAt
}

type Content {
    text String
}

model Post {
    id         String        @id @default(auto()) @map("_id") @db.ObjectId
    content    String
    visibility PostVisibilty @default(PUBLIC)
    userId     String?       @db.ObjectId
    likeCount  Int           @default(0)
    comments   Comment[]
    createdAt  DateTime      @default(now())
    updatedAt  DateTime      @updatedAt
}

type Comment {
    id        String
    userId    String?  @db.ObjectId
    postId    String?  @db.ObjectId
    createdAt DateTime @default(now())
}

model Like {
    id       String   @id @default(auto()) @map("_id") @db.ObjectId
    userId   String?  @db.ObjectId
    postId   String?  @db.ObjectId
    likeTime DateTime @default(now())
}

model Friendship {
    id        String          @id @default(auto()) @map("_id") @db.ObjectId
    userAId   String          @db.ObjectId
    userBId   String          @db.ObjectId
    status    FrienshipStatus @default(PENDING)
    createdAt DateTime        @default(now())
    updatedAt DateTime        @updatedAt
}
